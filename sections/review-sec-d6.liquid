{{ 'review-star.css' | asset_url | stylesheet_tag }}
<script src="{{ 'review-star.js' | asset_url }}" defer="defer"></script>
<style>
  .container-d11-sr-main-0 {
    padding: 80px 0;
  }

  .container-d11-sr {
    position: relative;
    width: 100%;
    margin: 0px auto;
    max-width: 1290px;
    padding: 0px;
    overflow: hidden;
  }

  .container-d11-sr * {
    scrollbar-width: thin;
    scrollbar-color: transparent transparent;
  }

  .parent-masonry {
    max-height: 1320px;
    position: relative;
    overflow-y: hidden;
  }

  #shopify-section-{{section.id}} .masonry {
    -webkit-column-count: 4;
    -moz-column-count: 4;
    column-count: 4;
    border-radius: 10px;
    box-shadow: 0px 57.2px rgba(0, 0, 0, 0.10);
    align-items: start;
    -webkit-column-gap: 1rem;
    -moz-column-gap: 1rem;
    column-gap: normal;
    margin: 2.5em auto;
    padding: 0;
    font-size: 0.85em;
    margin: auto;
  }

  #shopify-section-{{section.id}} .card-item-s {
    display: inline-block;
    padding: 1em;
    margin-bottom: 34px;
    width: 100%;
    transition: 1s ease all;
    box-sizing: border-box;
    max-width: 285px;
    padding: 16px;
    font-size: 16px;
    display: flex;
    flex-direction: column;
    gap: 16px;
    padding: 0px;
    border-bottom-right-radius: 10px;
    border-bottom-left-radius: 10px;
    background: #FFF;
    border: 1px solid #989797;
    overflow: hidden;
    border-radius: 10px;
  }

  #shopify-section-{{section.id}} .review {
    color: rgba(0, 0, 0, 0.75);
    font-family: "Poppins", sans-serif;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
    text-align: left;
  }

  #shopify-section-{{section.id}} .review p {
    margin: 0;
  }

  #shopify-section-{{section.id}} .author-stars {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin: 10px 0;
  }

  #shopify-section-{{section.id}} .author {
    font-size: 16px;
    background: linear-gradient(rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0.75)), #648291;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-align: left;
    color: #648291;
    font-style: normal;
    font-weight: 400;
    line-height: normal;
    margin: 0;
    font-family: "Poppins", sans-serif;
  }

  p.verified-text-d6 {
    margin: 0;
    display: flex;
    align-items: center;
    gap: 7px;
    font-family: "Poppins", sans-serif;
  }

  p.verified-text-d6 svg {
    width: 15px;
    height: 15px;
  }

  @media screen and (min-width: 769px) {
    #shopify-section-{{section.id}} .masonry {
      padding: 0 45px;
    }

    .container-d11-sr-main {
      background: linear-gradient(0deg, rgba(245, 240, 235, 0.00) 0%, #F5F0EB 100%);
      padding: 60px 0;
    }

    .shades {
      width: 100%;
      height: 150px;
      background: linear-gradient(0deg, #FFF -0.09%, rgba(255, 255, 255, 0.00) 100%);
      position: sticky;
      bottom: 0;
      left: 0;
      display: block;
    }

    #shopify-section-{{section.id}} .card-item-s {
      display: inline-block;
      padding: 1em;
      margin-bottom: 34px;
      width: 100%;
      transition: 1s ease all;
      box-sizing: border-box;
      max-width: 285px;
      padding: 0px;
      font-size: 16px;
      gap: 16px;
      border-bottom-right-radius: 10px;
      border-bottom-left-radius: 10px;
      background: #FFF;
    }
  }

  @media screen and (max-width: 768px) {
    .card-item-s {
      transition: 1s ease all;
      width: 100%;
      max-width: 100%;
    }

    .card-item-s.active {
      display: block !important;
      opacity: 1;
      z-index: 1;
    }

    .container-d11-sr-main-0 {
      padding: 30px 0 0;
    }

    #shopify-section-{{section.id}} .masonry {
      padding: 30px 0px;
      position: relative;
      height: 100%;
      max-height: 700px;
    }

    .shades {
      display: none;
    }

    .reviewer-image-d6 img {
      width: 100%;
      aspect-ratio: 1/1;
      object-fit: cover;
    }

    .container-d11-sr {
      position: relative;
      width: 100%;
      margin: 0px auto;
      max-width: 1220px;
      padding: 20px 20px !important;
      overflow: hidden;
    }

    #shopify-section-{{section.id}} .masonry {
      display: flex !important;
      flex-direction: column;
      transition: transform 0.5s ease;
      gap: 30px;
      overflow: scroll;
      scroll-behavior: smooth;
    }

    .dot-d11-1 {
      min-width: 6px;
      min-height: 6px;
      background-color: #fff;
      border-radius: 50%;
      border: 1px solid #BFBFBF;
      cursor: pointer;
      display: inline-block !important;
    }

    .dots-d11-1 {
      display: flex !important;
      padding: 0 10px;
      justify-content: center;
      margin: auto;
      align-items: center;
      gap: 10px;
    }

    .dot-d11-1.active {
      background: #648291;
    }
  }

  .main-r-images-d9 {
    width: 100%;
    margin-bottom: 60px;
  }

  .row-r-images-d9 {
    display: flex;
    justify-content: center;
    gap: 20px;
  }

  .col-r-videos-d9 {
    width: 100%;
    position: relative;
    aspect-ratio: 285 / 488;
    overflow: hidden;
    border-radius: 12px;
  }

  .col-r-videos-d9 video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .custom-center-zoom-out-slider-u4 {
    display: none;
  }

  .shopify-video-d9 {
    height: 100%;
  }

  .card-conten-d6 {
    padding: 0 16px;
  }

  .pro-img-title {
    display: flex;
    gap: 15px;
    font-family: "Poppins", sans-serif;
  }

  .review-product-d6 {
    margin: 10px 0 0;
    padding: 16px;
    border-top: 1px solid #989797;
  }

  .ss-total-rating {
    display: none;
  }

  .ss-rating-main {
    padding: 0 0 10px;
  }

  .pro-img-title img {
    width: 100%;
    max-width: 50px;
    height: 50px;
  }
</style>

<div class="container-d11-sr-main-0">
  <div class="container-d11-sr-main">
    <div class="container-d11-sr">
      <div class="parent-masonry" id="parent-masonry">
        <div class="masonry">
          {% for block in section.blocks %}
            <div class="card-item-s">
              {% if block.settings['reviewer-img'] %}
                <div class="reviewer-image-d6">
                  <img
                    src="{{ block.settings.reviewer-img | image_url: width: 800  }}"
                    width="100%"
                    height="200"
                  >
                </div>
              {% endif %}
              <div class="card-conten-d6">
                <div class="author-stars">
                  <p class="author">
                    <strong>{{ block.settings['reviewer-name'] }}</strong>
                  </p>
                  <p class="verified-text-d6">
                    <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 15 15" fill="none">
                      <rect width="15" height="15" rx="7.5" fill="black"/>
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M12.876 5.31L7.075 11.11L3.125 7.16L3.791 6.494L7.075 9.778L12.21 4.644L12.876 5.31Z" fill="white"/>
                    </svg>
                    verified
                  </p>
                </div>
                {% render 'review-star-d6',
                  rating: block.settings.rating,
                  star_size: block.settings.star_size,
                  full_star: block.settings.full_star,
                  empty_star: block.settings.empty_star,
                  gap: block.settings.gap
                %}
                <div class="review">{{ block.settings['review-text'] }}</div>
              </div>
              <div class="review-product-d6">
                {% assign product = block.settings.products %}
                <div class="pro-img-title">
                  {% liquid
                    if block.settings['p-img'] != blank
                      assign img = block.settings['p-img']
                    else
                      assign img = product.featured_image
                    endif
                    if block.settings['p-title'] != blank
                      assign title = block.settings['p-title']
                    else
                      assign title = product.title
                    endif
                  %}
                  <img src="{{ img | image_url: width: 400 }}" width="100" height="80">
                  <p>{{ title }}</p>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
        <div class="shades"></div>
      </div>
      <div class="dots-d11-1"></div>
    </div>
  </div>
</div>
{% schema %}
{
  "name": "Custom Reviews",
  "settings": [
  ],
  "blocks": [
      {
        "type": "text",
        "name": "Review",
        "settings": [
          {
            "type": "image_picker",
            "id": "reviewer-img",
            "label": "Image"
          },
          {
            "type": "text",
            "id": "reviewer-name",
            "label": "Name",
            "default": "Tami"
          },
           {
      "type": "range",
      "id": "rating",
      "label": "Rating",
      "min": 0,
      "max": 5,
      "step": 1,
      "default": 5,
      "info": "Set the rating value between 0 and 5."
    },
    {
      "type": "range",
      "id": "star_size",
      "label": "Star Size",
      "min": 10,
      "max": 100,
      "step": 1,
      "default": 25,
      "info": "Choose the size of the stars (in pixels)."
    },
    {
      "type": "image_picker",
      "id": "full_star",
      "label": "Full Star Image",
      "info": "Upload an image to represent a full star."
    },
    {
      "type": "image_picker",
      "id": "empty_star",
      "label": "Empty Star Image",
      "info": "Upload an image to represent an empty star."
    },
    {
      "type": "range",
      "id": "gap",
      "label": "Star Gap",
      "min": 0,
      "max": 20,
      "step": 1,
      "default": 2,
      "info": "Set the gap between the stars (in pixels)."
    },
          {
            "type": "richtext",
            "id": "review-text",
            "label": "Review"
          },
          {
            "type": "product",
            "id": "products",
            "label": "Select Product"
          },
          {
            "type": "image_picker",
            "id": "p-img",
            "label": "Product Image"
          },
          {
            "type": "text",
            "id": "p-title",
            "label": "Product Title"
          }
        ]
      }
  ],
  "presets": [
    {
      "name": "Custom Reviews"
    }
  ]
}
{% endschema %}

<script>
  const parentMasonry = document.getElementById('parent-masonry');
  const shades = document.querySelector('.shades');
  let isScrollEnabled = false;

  function checkScroll() {
    const parentOffsetTop = parentMasonry.getBoundingClientRect().top;
    const { scrollTop, scrollHeight, clientHeight } = parentMasonry;



    // Enable scrolling when parent-masonry is 100px from body top
    if (parentOffsetTop <= 100 && !isScrollEnabled) {
      parentMasonry.style.overflowY = 'scroll'; // Enable scrolling
      isScrollEnabled = true;

    } else if (parentOffsetTop > 100 && isScrollEnabled) {
      parentMasonry.style.overflowY = 'hidden'; // Disable scrolling
      isScrollEnabled = false;

    }

    // Hide .shades a few pixels before reaching the bottom of parent-masonry
    const buffer = 150; // Number of pixels before the bottom
    if (scrollTop + clientHeight >= scrollHeight - buffer) {
      shades.style.display = 'none';

    } else {
      shades.style.display = 'block';

    }
  }

  // Add event listener for scrolling to parentMasonry
  window.addEventListener('scroll', checkScroll);

  // Call checkScroll initially to set the initial overflow state
  document.addEventListener('DOMContentLoaded', () => {
    checkScroll();
  });

  // Also, add scroll event listener to parentMasonry to check its scroll position
  parentMasonry.addEventListener('scroll', checkScroll);
</script>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    const slider = document.querySelector(".masonry");
    const slides = slider.querySelectorAll(".card-item-s");
    const dotsContainer = document.querySelector(".dots-d11-1");

    if (!dotsContainer) {
      return;
    }

    // Show the first slide by default
    // slides[0].classList.add("active");

    // slides.forEach((slide, index) => {
    //   const dot = document.createElement("div");
    //   dot.classList.add("dot-d11-1");
    //   if (index === 0) {
    //     dot.classList.add("active");
    //   }
    //   dot.addEventListener("click", () => {
    //     const currentIndex = getCurrentSlideIndex();
    //     const direction = index > currentIndex ? 'left' : 'right';
    //     goToSlide(index, direction);
    //   });
    //   dotsContainer.appendChild(dot);
    // });

    if (window.matchMedia("(max-width: 768px)").matches) {
      slider.addEventListener("mousedown", dragStart);
      slider.addEventListener("touchstart", dragStart);

      slider.addEventListener("mouseup", dragEnd);
      slider.addEventListener("touchend", dragEnd);

      slider.addEventListener("mousemove", drag);
      slider.addEventListener("touchmove", drag);

      slider.addEventListener("mouseleave", dragEnd); // Added to handle drag end when mouse leaves slider area

      slider.addEventListener("selectstart", function(e) {
        e.preventDefault();
      });
    }

    let isDragging = false;
    let startPosition = 0;
    let prevPosition = 0;

    function dragStart(event) {
      startPosition = event.type === "touchstart" ? event.touches[0].clientX : event.clientX;
      isDragging = true;
      prevPosition = startPosition;
      slider.classList.add("grabbing");
    }

    function drag(event) {
      if (!isDragging) return;
      const currentPosition = event.type === "touchmove" ? event.touches[0].clientX : event.clientX;
      const positionDiff = currentPosition - prevPosition;
      if (Math.abs(positionDiff) > 2) { // Threshold set to 2px for triggering slide change
        if (positionDiff > 0) {
          // Dragging to the right (previous slide)
          goToSlide(getCurrentSlideIndex() - 1, 'right');
        } else {
          // Dragging to the left (next slide)
          goToSlide(getCurrentSlideIndex() + 1, 'left');
        }
        isDragging = false; // End dragging after a slide change
      }
    }

    function dragEnd() {
      isDragging = false;
      slider.classList.remove("grabbing");
    }

    // function getCurrentSlideIndex() {
    //   return Array.from(slides).findIndex(slide => slide.classList.contains("active"));
    // }

    // function updateDots(index) {
    //   const activeDot = dotsContainer.querySelector(".dot-d11-1.active");
    //   if (activeDot) activeDot.classList.remove("active");
    //   dotsContainer.children[index].classList.add("active");
    // }

    // function goToSlide(index, direction) {
    //   if (index < 0 || index >= slides.length) return;

    //   const currentIndex = getCurrentSlideIndex();
    //   if (currentIndex === index) return;

    //   const currentSlide = slides[currentIndex];
    //   const nextSlide = slides[index];

    //   slides.forEach(slide => {
    //     slide.classList.remove("active", "slide-in-left", "slide-in-right", "slide-out-left", "slide-out-right");
    //   });

    //   if (direction === 'left') {
    //     currentSlide.classList.add("slide-out-left");
    //     nextSlide.classList.add("slide-in-right");
    //   } else {
    //     currentSlide.classList.add("slide-out-right");
    //     nextSlide.classList.add("slide-in-left");
    //   }

    //   setTimeout(() => {
    //     currentSlide.classList.remove("active");
    //     nextSlide.classList.add("active");
    //   }, 100);

    //   updateDots(index);
    // }
  });
</script>
